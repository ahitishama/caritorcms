{"version":3,"sources":["webpack:///./src/$_lazy_route_resource lazy namespace object","webpack:///./src/app/app.component.css","webpack:///./src/app/app.component.html","webpack:///./src/app/app.component.ts","webpack:///./src/app/app.module.ts","webpack:///./src/app/components/navbar/navbar.component.css","webpack:///./src/app/components/navbar/navbar.component.html","webpack:///./src/app/components/navbar/navbar.component.ts","webpack:///./src/app/components/pages/pages.component.css","webpack:///./src/app/components/pages/pages.component.html","webpack:///./src/app/components/pages/pages.component.ts","webpack:///./src/app/services/page.service.ts","webpack:///./src/environments/environment.ts","webpack:///./src/main.ts"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./src/$$_lazy_route_resource lazy recursive\";","module.exports = \"\"","module.exports = \"<app-navbar></app-navbar>\\n<div class=\\\"container-fluid\\\">\\n    <div class=\\\"row\\\">\\n        <div class=col-xs-12>\\n            <router-outlet></router-outlet>\\n        </div>\\n    </div>\\n</div>\\n\"","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  title = 'angualrcms';\n}\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { HttpModule } from '@angular/http';\nimport { AppComponent } from './app.component';\nimport { NavbarComponent } from './components/navbar/navbar.component';\nimport { PageService } from './services/page.service';\nimport { FormsModule } from '@angular/forms';\nimport { RouterModule, Routes } from '@angular/router';\nimport { PagesComponent } from './components/pages/pages.component';\n\nconst appRoutes: Routes = [\n  {path: ':page', component: PagesComponent},\n  {path: '', component: PagesComponent}\n];\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    NavbarComponent,\n    PagesComponent\n  ],\n  imports: [\n    BrowserModule,\n    HttpModule,\n    FormsModule,\n    RouterModule.forRoot(appRoutes)\n    ],\n  providers: [\n    PageService\n  ],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","module.exports = \"\"","module.exports = \"<nav class=\\\"navbar navbar-inverse\\\">\\n  <div class=\\\"container\\\">\\n    <div class=\\\"navbar-header\\\">\\n      <button type=\\\"button\\\" class=\\\"navbar-toggle collapsed\\\" data-toggle=\\\"collapse\\\" data-target=\\\"#navbar\\\" aria-expanded=\\\"false\\\" aria-controls=\\\"navbar\\\">\\n        <span class=\\\"sr-only\\\">Toggle navigation</span>\\n        <span class=\\\"icon-bar\\\"></span>\\n        <span class=\\\"icon-bar\\\"></span>\\n        <span class=\\\"icon-bar\\\"></span>\\n        <span class=\\\"icon-bar\\\"></span>\\n      </button>\\n      <a class=\\\"navbar-brand\\\" routerLink=\\\"/\\\">CMS</a>\\n    </div>\\n    <div id=\\\"navbar\\\" class=\\\"collapse navbar-collapse\\\">\\n      <ul class=\\\"nav navbar-nav\\\">\\n          <ng-container *ngFor=\\\"let page of pages?.value\\\">\\n              <li *ngIf=\\\"page.slug!=='home'\\\">\\n                <a routerLink=\\\"/{{page.slug}}\\\">{{page.title}}</a>\\n              </li>\\n          </ng-container>\\n      </ul>\\n    </div><!--/.nav-collapse -->\\n  </div>\\n</nav>\\n\"","import { Component, OnInit } from '@angular/core';\nimport { PageService } from '../../services/page.service';\n\n@Component({\n  selector: 'app-navbar',\n  templateUrl: './navbar.component.html',\n  styleUrls: ['./navbar.component.css']\n})\nexport class NavbarComponent implements OnInit {\n\n  pages: any;\n  constructor(public pageServic: PageService) { }\n\n  ngOnInit() {\n    this.pageServic.getPages().subscribe(pages => {\n      this.pageServic.pagesBS.next(pages);\n      this.pages = this.pageServic.pagesBS;\n    });\n  }\n\n}\n","module.exports = \"\"","module.exports = \"<div class=\\\"row\\\">\\n  <div class=\\\"col-xs-12\\\">\\n      {{ pageBody?.content }}\\n  </div>\\n</div>\\n\"","import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { PageService } from '../../services/page.service';\n\n\n@Component({\n  selector: 'app-pages',\n  templateUrl: './pages.component.html',\n  styleUrls: ['./pages.component.css']\n})\nexport class PagesComponent implements OnInit {\n  private param: any;\n  public pageBody: any;\n  public pages: any;\n\n  constructor(\n    private route: ActivatedRoute,\n    private router: Router,\n    private pageService: PageService\n  ) { }\n\n  ngOnInit() {\n    this.pageService.getPages().subscribe(pages => {\n      this.pages = pages;\n    });\n\n    this.route.params.subscribe(params => {\n      this.param = params['page'];\n      if (this.param === undefined) {\n        this.param = 'home';\n      }\n\n      this.pageService.getPage(this.param).subscribe(pageBody => {\n        if (pageBody == null) {\n          this.router.navigateByUrl('');\n        }\n        this.pageBody = pageBody;\n      });\n    });\n  }\n\n}\n","import { Http } from '@angular/http';\nimport { Injectable } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\nimport 'rxjs/add/operator/map';\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class PageService {\n\n  constructor(private http: Http) { }\n  public pagesBS = new BehaviorSubject<string>(null);\n\n  getPages() {\n    return this.http.get('http://localhost:3000/pages')\n        .map(res => res.json());\n  }\n\n  getPage(slug) {\n    return this.http.get('http://localhost:3000/pages/' + slug)\n        .map(res => res.json());\n  }\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n\n"],"sourceRoot":""}